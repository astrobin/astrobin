# -*- coding: utf-8 -*-
# Generated by Django 1.9.13 on 2017-10-17 12:19


import astrobin.fields
import astrobin.models
from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Acquisition',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField(blank=True, help_text='Please use the following format: yyyy-mm-dd.', null=True, verbose_name='Date')),
            ],
        ),
        migrations.CreateModel(
            name='App',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=256)),
                ('description', models.TextField(blank=True, null=True)),
                ('key', models.CharField(blank=True, default=b'', editable=False, max_length=256)),
                ('secret', models.CharField(blank=True, default=b'', editable=False, max_length=256)),
                ('active', models.BooleanField(default=True, editable=False)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('registrar', models.ForeignKey(editable=False, on_delete=django.db.models.deletion.CASCADE, related_name='app_api_key', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-created'],
            },
        ),
        migrations.CreateModel(
            name='AppApiKeyRequest',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='The name of the website or app that wishes to use the APIs.', max_length=256, verbose_name='Name')),
                ('description', models.TextField(blank=True, help_text='Please explain the purpose of your application, and how you intend to use the API.', null=True, verbose_name='Description')),
                ('approved', models.BooleanField(default=False, editable=False)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('registrar', models.ForeignKey(editable=False, on_delete=django.db.models.deletion.CASCADE, related_name='app_api_key_request', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-created'],
            },
        ),
        migrations.CreateModel(
            name='Collection',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_created', models.DateField(auto_now_add=True)),
                ('date_updated', models.DateField(auto_now=True)),
                ('name', models.CharField(max_length=256, verbose_name='Name')),
                ('description', models.TextField(blank=True, null=True, verbose_name='Description')),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='CommercialGear',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('proper_make', models.CharField(blank=True, help_text='Sometimes, product make/brand/producer/developer names are not written properly by the users. Write here the proper make/brand/producer/developer name.', max_length=128, null=True, verbose_name='Proper make')),
                ('proper_name', models.CharField(blank=True, help_text="Sometimes, product names are not written properly by the users. Write here the proper product name, not including the make/brand/producer/developer name.<br/>It is recommended that you try to group as many items as possible, so try to use a generic version of your product's name.", max_length=128, null=True, verbose_name='Proper name')),
                ('tagline', models.CharField(blank=True, help_text='A memorable phrase that will sum up this product, for marketing purposes.', max_length=256, null=True, verbose_name='Tagline')),
                ('tagline_en', models.CharField(blank=True, help_text='A memorable phrase that will sum up this product, for marketing purposes.', max_length=256, null=True, verbose_name='Tagline')),
                ('tagline_it', models.CharField(blank=True, help_text='A memorable phrase that will sum up this product, for marketing purposes.', max_length=256, null=True, verbose_name='Tagline')),
                ('tagline_es', models.CharField(blank=True, help_text='A memorable phrase that will sum up this product, for marketing purposes.', max_length=256, null=True, verbose_name='Tagline')),
                ('tagline_fr', models.CharField(blank=True, help_text='A memorable phrase that will sum up this product, for marketing purposes.', max_length=256, null=True, verbose_name='Tagline')),
                ('tagline_fi', models.CharField(blank=True, help_text='A memorable phrase that will sum up this product, for marketing purposes.', max_length=256, null=True, verbose_name='Tagline')),
                ('tagline_de', models.CharField(blank=True, help_text='A memorable phrase that will sum up this product, for marketing purposes.', max_length=256, null=True, verbose_name='Tagline')),
                ('tagline_nl', models.CharField(blank=True, help_text='A memorable phrase that will sum up this product, for marketing purposes.', max_length=256, null=True, verbose_name='Tagline')),
                ('tagline_tr', models.CharField(blank=True, help_text='A memorable phrase that will sum up this product, for marketing purposes.', max_length=256, null=True, verbose_name='Tagline')),
                ('tagline_sq', models.CharField(blank=True, help_text='A memorable phrase that will sum up this product, for marketing purposes.', max_length=256, null=True, verbose_name='Tagline')),
                ('tagline_pl', models.CharField(blank=True, help_text='A memorable phrase that will sum up this product, for marketing purposes.', max_length=256, null=True, verbose_name='Tagline')),
                ('tagline_pt_BR', models.CharField(blank=True, help_text='A memorable phrase that will sum up this product, for marketing purposes.', max_length=256, null=True, verbose_name='Tagline')),
                ('tagline_el', models.CharField(blank=True, help_text='A memorable phrase that will sum up this product, for marketing purposes.', max_length=256, null=True, verbose_name='Tagline')),
                ('tagline_ru', models.CharField(blank=True, help_text='A memorable phrase that will sum up this product, for marketing purposes.', max_length=256, null=True, verbose_name='Tagline')),
                ('tagline_ar', models.CharField(blank=True, help_text='A memorable phrase that will sum up this product, for marketing purposes.', max_length=256, null=True, verbose_name='Tagline')),
                ('tagline_ja', models.CharField(blank=True, help_text='A memorable phrase that will sum up this product, for marketing purposes.', max_length=256, null=True, verbose_name='Tagline')),
                ('link', models.URLField(blank=True, help_text="The link to this product's page on your website.", max_length=256, null=True, verbose_name='Link')),
                ('description', models.TextField(blank=True, help_text='Here you can write the full commercial description of your product. You can use some <a href="/faq/#comments">formatting rules</a>.', null=True, verbose_name='Description')),
                ('description_en', models.TextField(blank=True, help_text='Here you can write the full commercial description of your product. You can use some <a href="/faq/#comments">formatting rules</a>.', null=True, verbose_name='Description')),
                ('description_it', models.TextField(blank=True, help_text='Here you can write the full commercial description of your product. You can use some <a href="/faq/#comments">formatting rules</a>.', null=True, verbose_name='Description')),
                ('description_es', models.TextField(blank=True, help_text='Here you can write the full commercial description of your product. You can use some <a href="/faq/#comments">formatting rules</a>.', null=True, verbose_name='Description')),
                ('description_fr', models.TextField(blank=True, help_text='Here you can write the full commercial description of your product. You can use some <a href="/faq/#comments">formatting rules</a>.', null=True, verbose_name='Description')),
                ('description_fi', models.TextField(blank=True, help_text='Here you can write the full commercial description of your product. You can use some <a href="/faq/#comments">formatting rules</a>.', null=True, verbose_name='Description')),
                ('description_de', models.TextField(blank=True, help_text='Here you can write the full commercial description of your product. You can use some <a href="/faq/#comments">formatting rules</a>.', null=True, verbose_name='Description')),
                ('description_nl', models.TextField(blank=True, help_text='Here you can write the full commercial description of your product. You can use some <a href="/faq/#comments">formatting rules</a>.', null=True, verbose_name='Description')),
                ('description_tr', models.TextField(blank=True, help_text='Here you can write the full commercial description of your product. You can use some <a href="/faq/#comments">formatting rules</a>.', null=True, verbose_name='Description')),
                ('description_sq', models.TextField(blank=True, help_text='Here you can write the full commercial description of your product. You can use some <a href="/faq/#comments">formatting rules</a>.', null=True, verbose_name='Description')),
                ('description_pl', models.TextField(blank=True, help_text='Here you can write the full commercial description of your product. You can use some <a href="/faq/#comments">formatting rules</a>.', null=True, verbose_name='Description')),
                ('description_pt_BR', models.TextField(blank=True, help_text='Here you can write the full commercial description of your product. You can use some <a href="/faq/#comments">formatting rules</a>.', null=True, verbose_name='Description')),
                ('description_el', models.TextField(blank=True, help_text='Here you can write the full commercial description of your product. You can use some <a href="/faq/#comments">formatting rules</a>.', null=True, verbose_name='Description')),
                ('description_ru', models.TextField(blank=True, help_text='Here you can write the full commercial description of your product. You can use some <a href="/faq/#comments">formatting rules</a>.', null=True, verbose_name='Description')),
                ('description_ar', models.TextField(blank=True, help_text='Here you can write the full commercial description of your product. You can use some <a href="/faq/#comments">formatting rules</a>.', null=True, verbose_name='Description')),
                ('description_ja', models.TextField(blank=True, help_text='Here you can write the full commercial description of your product. You can use some <a href="/faq/#comments">formatting rules</a>.', null=True, verbose_name='Description')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ['created'],
                'verbose_name_plural': 'Commercial gear items',
            },
        ),
        migrations.CreateModel(
            name='Gear',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('make', models.CharField(blank=True, help_text='The make, brand, producer or developer of this product.', max_length=128, null=True, verbose_name='Make')),
                ('name', models.CharField(help_text='Just the name of this product, without any properties or personal customizations. Try to use the international name, in English language, if applicable. This name is shared among all users on AstroBin.', max_length=128, verbose_name='Name')),
                ('updated', models.DateTimeField(auto_now=True, null=True)),
                ('moderator_fixed', models.DateTimeField(blank=True, editable=False, null=True)),
            ],
            options={
                'ordering': ('-updated',),
            },
        ),
        migrations.CreateModel(
            name='GearAssistedMerge',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('cutoff', models.DecimalField(decimal_places=2, default=0, max_digits=3)),
            ],
        ),
        migrations.CreateModel(
            name='GearHardMergeRedirect',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('fro', models.IntegerField()),
                ('to', models.IntegerField()),
            ],
        ),
        migrations.CreateModel(
            name='GearMakeAutoRename',
            fields=[
                ('rename_from', models.CharField(max_length=128, primary_key=True, serialize=False, verbose_name=b'Rename form')),
                ('rename_to', models.CharField(max_length=128, verbose_name=b'Rename to')),
            ],
        ),
        migrations.CreateModel(
            name='GearUserInfo',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('alias', models.CharField(blank=True, help_text='A descriptive name, alias or nickname for your own copy of this product.', max_length=128, null=True, verbose_name='Alias')),
                ('comment', models.TextField(blank=True, help_text='Information, description or comment about your own copy of this product.', null=True, verbose_name='Comment')),
            ],
        ),
        migrations.CreateModel(
            name='GlobalStat',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField(auto_now_add=True)),
                ('users', models.IntegerField()),
                ('images', models.IntegerField()),
                ('integration', models.IntegerField()),
            ],
            options={
                'ordering': ['-date'],
            },
        ),
        migrations.CreateModel(
            name='Image',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=128, verbose_name='Title')),
                ('subject_type', models.IntegerField(choices=[(0, '---------'), (100, 'Deep sky object'), (200, 'Solar system body or event'), (300, 'Extremely wide field'), (400, 'Star trails'), (450, 'Northern lights'), (500, 'Gear'), (600, 'Other')], default=0, verbose_name='Subject type')),
                ('objects_in_field', models.CharField(help_text='Use a <strong>comma</strong> to separate the values.', max_length=512, null=True, verbose_name='Objects in field')),
                ('solar_system_main_subject', models.IntegerField(blank=True, choices=[(0, 'Sun'), (1, "Earth's Moon"), (2, 'Mercury'), (3, 'Venus'), (4, 'Mars'), (5, 'Jupiter'), (6, 'Saturn'), (7, 'Uranus'), (8, 'Neptune'), (9, 'Minor planet'), (10, 'Comet'), (11, 'Other')], help_text='If the main subject of your image is a body in the solar system, please select which (or which type) it is.', null=True, verbose_name='Main solar system subject')),
                ('description', models.TextField(blank=True, help_text='HTML tags are allowed.', null=True, verbose_name='Description')),
                ('link', models.CharField(blank=True, max_length=256, null=True)),
                ('link_to_fits', models.CharField(blank=True, max_length=256, null=True)),
                ('image_file', models.ImageField(height_field=b'h', max_length=256, null=True, upload_to=astrobin.models.image_upload_path, width_field=b'w')),
                ('uploaded', models.DateTimeField(auto_now_add=True)),
                ('published', models.DateTimeField(blank=True, editable=False, null=True)),
                ('updated', models.DateTimeField(auto_now=True, null=True)),
                ('watermark_text', models.CharField(blank=True, max_length=128, null=True, verbose_name=b'Text')),
                ('watermark', models.BooleanField(default=False, verbose_name='Apply watermark to image')),
                ('watermark_position', models.IntegerField(choices=[(0, 'Center'), (1, 'Top left'), (2, 'Top center'), (3, 'Top right'), (4, 'Bottom left'), (5, 'Bottom center'), (6, 'Bottom right')], default=0, verbose_name='Position')),
                ('watermark_size', models.CharField(choices=[('S', 'Small'), ('M', 'Medium'), ('L', 'Large')], default=b'M', help_text='The final font size will depend on how long your watermark is.', max_length=1, verbose_name='Size')),
                ('watermark_opacity', models.IntegerField(default=10)),
                ('plot_is_overlay', models.BooleanField(default=False, editable=False)),
                ('is_wip', models.BooleanField(default=False, editable=False)),
                ('w', models.IntegerField(default=0, editable=False)),
                ('h', models.IntegerField(default=0, editable=False)),
                ('animated', models.BooleanField(default=False, editable=False)),
                ('license', models.IntegerField(choices=[(0, 'None (All rights reserved)'), (1, 'Attribution-NonCommercial-ShareAlike Creative Commons'), (2, 'Attribution-NonCommercial Creative Commons'), (3, 'Attribution-NonCommercial-NoDerivs Creative Commons'), (4, 'Attribution Creative Commons'), (5, 'Attribution-ShareAlike Creative Commons'), (6, 'Attribution-NoDerivs Creative Commons')], default=0, verbose_name='License')),
                ('is_final', models.BooleanField(default=True, editable=False)),
                ('allow_comments', models.BooleanField(default=True, verbose_name='Allow comments')),
                ('moderator_decision', models.PositiveIntegerField(default=0, editable=False)),
                ('moderated_when', models.DateTimeField(default=None, editable=False, null=True)),
            ],
            options={
                'ordering': ('-uploaded', '-id'),
            },
            bases=(astrobin.models.HasSolutionMixin, models.Model),
        ),
        migrations.CreateModel(
            name='ImageOfTheDay',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField(auto_now_add=True)),
                ('chosen_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='iotds_chosen', to=settings.AUTH_USER_MODEL)),
                ('image', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='image_of_the_day', to='astrobin.Image')),
                ('runnerup_1', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='iotd_runnerup_1', to='astrobin.Image')),
                ('runnerup_2', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='iotd_runnerup_2', to='astrobin.Image')),
            ],
            options={
                'ordering': ['-date'],
            },
        ),
        migrations.CreateModel(
            name='ImageOfTheDayCandidate',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField(auto_now_add=True)),
                ('position', models.PositiveIntegerField()),
                ('image', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='image_of_the_day_candidate', to='astrobin.Image')),
            ],
            options={
                'ordering': ['-date', 'position'],
            },
        ),
        migrations.CreateModel(
            name='ImageRevision',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('image_file', models.ImageField(height_field=b'h', max_length=256, null=True, upload_to=astrobin.models.image_upload_path, width_field=b'w')),
                ('description', models.TextField(blank=True, help_text='HTML tags are allowed.', null=True, verbose_name='Description')),
                ('uploaded', models.DateTimeField(auto_now_add=True)),
                ('w', models.IntegerField(default=0, editable=False)),
                ('h', models.IntegerField(default=0, editable=False)),
                ('is_final', models.BooleanField(default=False, editable=False)),
                ('label', models.CharField(editable=False, max_length=2)),
                ('image', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='revisions', to='astrobin.Image')),
            ],
            options={
                'ordering': ('uploaded', '-id'),
            },
            bases=(astrobin.models.HasSolutionMixin, models.Model),
        ),
        migrations.CreateModel(
            name='Location',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text="A descriptive name, e.g. 'Home observatory' or 'Mount Whitney'.", max_length=255, null=True, verbose_name='Name')),
                ('city', models.CharField(help_text='If this location is not in a city, use the name of the closest city.', max_length=255, null=True, verbose_name='City')),
                ('state', models.CharField(blank=True, max_length=255, null=True, verbose_name='State or province')),
                ('country', astrobin.fields.CountryField(blank=True, choices=[('', '---------'), ('GB', 'United Kingdom'), ('AF', 'Afghanistan'), ('AX', 'Aland Islands'), ('AL', 'Albania'), ('DZ', 'Algeria'), ('AS', 'American Samoa'), ('AD', 'Andorra'), ('AO', 'Angola'), ('AI', 'Anguilla'), ('AQ', 'Antarctica'), ('AG', 'Antigua and Barbuda'), ('AR', 'Argentina'), ('AM', 'Armenia'), ('AW', 'Aruba'), ('AU', 'Australia'), ('AT', 'Austria'), ('AZ', 'Azerbaijan'), ('BS', 'Bahamas'), ('BH', 'Bahrain'), ('BD', 'Bangladesh'), ('BB', 'Barbados'), ('BY', 'Belarus'), ('BE', 'Belgium'), ('BZ', 'Belize'), ('BJ', 'Benin'), ('BM', 'Bermuda'), ('BT', 'Bhutan'), ('BO', 'Bolivia'), ('BA', 'Bosnia and Herzegovina'), ('BW', 'Botswana'), ('BV', 'Bouvet Island'), ('BR', 'Brazil'), ('IO', 'British Indian Ocean Territory'), ('BN', 'Brunei Darussalam'), ('BG', 'Bulgaria'), ('BF', 'Burkina Faso'), ('BI', 'Burundi'), ('KH', 'Cambodia'), ('CM', 'Cameroon'), ('CA', 'Canada'), ('CV', 'Cape Verde'), ('KY', 'Cayman Islands'), ('CF', 'Central African Republic'), ('TD', 'Chad'), ('CL', 'Chile'), ('CN', 'China'), ('CX', 'Christmas Island'), ('CC', 'Cocos (Keeling) Islands'), ('CO', 'Colombia'), ('KM', 'Comoros'), ('CG', 'Congo'), ('CD', 'Congo, The Democratic Republic of the'), ('CK', 'Cook Islands'), ('CR', 'Costa Rica'), ('CI', "Cote d'Ivoire"), ('HR', 'Croatia'), ('CU', 'Cuba'), ('CY', 'Cyprus'), ('CZ', 'Czech Republic'), ('DK', 'Denmark'), ('DJ', 'Djibouti'), ('DM', 'Dominica'), ('DO', 'Dominican Republic'), ('EC', 'Ecuador'), ('EG', 'Egypt'), ('SV', 'El Salvador'), ('GQ', 'Equatorial Guinea'), ('ER', 'Eritrea'), ('EE', 'Estonia'), ('ET', 'Ethiopia'), ('FK', 'Falkland Islands (Malvinas)'), ('FO', 'Faroe Islands'), ('FJ', 'Fiji'), ('FI', 'Finland'), ('FR', 'France'), ('GF', 'French Guiana'), ('PF', 'French Polynesia'), ('TF', 'French Southern Territories'), ('GA', 'Gabon'), ('GM', 'Gambia'), ('GE', 'Georgia'), ('DE', 'Germany'), ('GH', 'Ghana'), ('GI', 'Gibraltar'), ('GR', 'Greece'), ('GL', 'Greenland'), ('GD', 'Grenada'), ('GP', 'Guadeloupe'), ('GU', 'Guam'), ('GT', 'Guatemala'), ('GG', 'Guernsey'), ('GN', 'Guinea'), ('GW', 'Guinea-Bissau'), ('GY', 'Guyana'), ('HT', 'Haiti'), ('HM', 'Heard Island and McDonald Islands'), ('VA', 'Holy See (Vatican City State)'), ('HN', 'Honduras'), ('HK', 'Hong Kong'), ('HU', 'Hungary'), ('IS', 'Iceland'), ('IN', 'India'), ('ID', 'Indonesia'), ('IR', 'Iran, Islamic Republic of'), ('IQ', 'Iraq'), ('IE', 'Ireland'), ('IM', 'Isle of Man'), ('IL', 'Israel'), ('IT', 'Italy'), ('JM', 'Jamaica'), ('JP', 'Japan'), ('JE', 'Jersey'), ('JO', 'Jordan'), ('KZ', 'Kazakhstan'), ('KE', 'Kenya'), ('KI', 'Kiribati'), ('KP', "Korea, Democratic People's Republic of"), ('KR', 'Korea, Republic of'), ('KW', 'Kuwait'), ('KG', 'Kyrgyzstan'), ('LA', "Lao People's Democratic Republic"), ('LV', 'Latvia'), ('LB', 'Lebanon'), ('LS', 'Lesotho'), ('LR', 'Liberia'), ('LY', 'Libyan Arab Jamahiriya'), ('LI', 'Liechtenstein'), ('LT', 'Lithuania'), ('LU', 'Luxembourg'), ('MO', 'Macao'), ('MK', 'Macedonia, The Former Yugoslav Republic of'), ('MG', 'Madagascar'), ('MW', 'Malawi'), ('MY', 'Malaysia'), ('MV', 'Maldives'), ('ML', 'Mali'), ('MT', 'Malta'), ('MH', 'Marshall Islands'), ('MQ', 'Martinique'), ('MR', 'Mauritania'), ('MU', 'Mauritius'), ('YT', 'Mayotte'), ('MX', 'Mexico'), ('FM', 'Micronesia, Federated States of'), ('MD', 'Moldova'), ('MC', 'Monaco'), ('MN', 'Mongolia'), ('ME', 'Montenegro'), ('MS', 'Montserrat'), ('MA', 'Morocco'), ('MZ', 'Mozambique'), ('MM', 'Myanmar'), ('NA', 'Namibia'), ('NR', 'Nauru'), ('NP', 'Nepal'), ('NL', 'Netherlands'), ('AN', 'Netherlands Antilles'), ('NC', 'New Caledonia'), ('NZ', 'New Zealand'), ('NI', 'Nicaragua'), ('NE', 'Niger'), ('NG', 'Nigeria'), ('NU', 'Niue'), ('NF', 'Norfolk Island'), ('MP', 'Northern Mariana Islands'), ('NO', 'Norway'), ('OM', 'Oman'), ('PK', 'Pakistan'), ('PW', 'Palau'), ('PS', 'Palestinian Territory, Occupied'), ('PA', 'Panama'), ('PG', 'Papua New Guinea'), ('PY', 'Paraguay'), ('PE', 'Peru'), ('PH', 'Philippines'), ('PN', 'Pitcairn'), ('PL', 'Poland'), ('PT', 'Portugal'), ('PR', 'Puerto Rico'), ('QA', 'Qatar'), ('RE', 'Reunion'), ('RO', 'Romania'), ('RU', 'Russian Federation'), ('RW', 'Rwanda'), ('BL', 'Saint Barthelemy'), ('SH', 'Saint Helena'), ('KN', 'Saint Kitts and Nevis'), ('LC', 'Saint Lucia'), ('MF', 'Saint Martin'), ('PM', 'Saint Pierre and Miquelon'), ('VC', 'Saint Vincent and the Grenadines'), ('WS', 'Samoa'), ('SM', 'San Marino'), ('ST', 'Sao Tome and Principe'), ('SA', 'Saudi Arabia'), ('SN', 'Senegal'), ('RS', 'Serbia'), ('SC', 'Seychelles'), ('SL', 'Sierra Leone'), ('SG', 'Singapore'), ('SK', 'Slovakia'), ('SI', 'Slovenia'), ('SB', 'Solomon Islands'), ('SO', 'Somalia'), ('ZA', 'South Africa'), ('GS', 'South Georgia and the South Sandwich Islands'), ('ES', 'Spain'), ('LK', 'Sri Lanka'), ('SD', 'Sudan'), ('SR', 'Suriname'), ('SJ', 'Svalbard and Jan Mayen'), ('SZ', 'Swaziland'), ('SE', 'Sweden'), ('CH', 'Switzerland'), ('SY', 'Syrian Arab Republic'), ('TW', 'Taiwan, Province of China'), ('TJ', 'Tajikistan'), ('TZ', 'Tanzania, United Republic of'), ('TH', 'Thailand'), ('TL', 'Timor-Leste'), ('TG', 'Togo'), ('TK', 'Tokelau'), ('TO', 'Tonga'), ('TT', 'Trinidad and Tobago'), ('TN', 'Tunisia'), ('TR', 'Turkey'), ('TM', 'Turkmenistan'), ('TC', 'Turks and Caicos Islands'), ('TV', 'Tuvalu'), ('UG', 'Uganda'), ('UA', 'Ukraine'), ('AE', 'United Arab Emirates'), ('US', 'United States'), ('UM', 'United States Minor Outlying Islands'), ('UY', 'Uruguay'), ('UZ', 'Uzbekistan'), ('VU', 'Vanuatu'), ('VE', 'Venezuela'), ('VN', 'Viet Nam'), ('VG', 'Virgin Islands, British'), ('VI', 'Virgin Islands, U.S.'), ('WF', 'Wallis and Futuna'), ('EH', 'Western Sahara'), ('YE', 'Yemen'), ('ZM', 'Zambia'), ('ZW', 'Zimbabwe')], max_length=2, null=True, verbose_name='Country')),
                ('lat_deg', models.IntegerField(null=True)),
                ('lat_min', models.IntegerField(blank=True, null=True)),
                ('lat_sec', models.IntegerField(blank=True, null=True)),
                ('lat_side', models.CharField(choices=[('N', 'North'), ('S', 'South')], default=b'N', max_length=1, verbose_name='North or south')),
                ('lon_deg', models.IntegerField(null=True)),
                ('lon_min', models.IntegerField(blank=True, null=True)),
                ('lon_sec', models.IntegerField(blank=True, null=True)),
                ('lon_side', models.CharField(choices=[('E', 'East'), ('W', 'West')], default=b'E', max_length=1, verbose_name='East or West')),
                ('altitude', models.IntegerField(blank=True, help_text='In meters.', null=True, verbose_name='Altitude')),
            ],
        ),
        migrations.CreateModel(
            name='Request',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('fulfilled', models.BooleanField()),
                ('message', models.CharField(max_length=255)),
                ('created', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'ordering': ['-created'],
            },
        ),
        migrations.CreateModel(
            name='RetailedGear',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('link', models.URLField(blank=True, help_text="The link to this product's page on your website.", max_length=512, null=True, verbose_name='Link')),
                ('price', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True, verbose_name='Price')),
                ('currency', models.CharField(choices=[('AUD', 'AUD - Australian dollars'), ('CAD', 'CAD - Canadian dollars'), ('CHF', 'CHF - Swiss francs'), ('EUR', 'EUR - Euros'), ('GBP', 'GPB - Pound stelings'), ('PLN', 'PLN - Polish zloty'), ('SEK', 'SEK - Swedish krona'), ('USD', 'USD - American dollars')], default=b'EUR', max_length=3, verbose_name='Currency')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('retailer', models.ForeignKey(editable=False, on_delete=django.db.models.deletion.CASCADE, related_name='retailed_gear', to=settings.AUTH_USER_MODEL, verbose_name='Producer')),
            ],
            options={
                'ordering': ['created'],
                'verbose_name_plural': 'Retailed gear items',
            },
        ),
        migrations.CreateModel(
            name='UserProfile',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('real_name', models.CharField(blank=True, help_text='If present, your real name will be used throughout the website.', max_length=128, null=True, verbose_name='Real name')),
                ('website', models.CharField(blank=True, max_length=128, null=True, verbose_name='Website')),
                ('job', models.CharField(blank=True, max_length=128, null=True, verbose_name='Job')),
                ('hobbies', models.CharField(blank=True, help_text='Do you have any hobbies other than astrophotography?', max_length=128, null=True, verbose_name='Hobbies')),
                ('timezone', models.CharField(blank=True, choices=[('Pacific/Midway', '(GMT-1100) Pacific/Midway'), ('Pacific/Niue', '(GMT-1100) Pacific/Niue'), ('Pacific/Pago_Pago', '(GMT-1100) Pacific/Pago_Pago'), ('Pacific/Honolulu', '(GMT-1000) Pacific/Honolulu'), ('Pacific/Rarotonga', '(GMT-1000) Pacific/Rarotonga'), ('Pacific/Tahiti', '(GMT-1000) Pacific/Tahiti'), ('US/Hawaii', '(GMT-1000) US/Hawaii'), ('Pacific/Marquesas', '(GMT-0930) Pacific/Marquesas'), ('America/Adak', '(GMT-0900) America/Adak'), ('Pacific/Gambier', '(GMT-0900) Pacific/Gambier'), ('America/Anchorage', '(GMT-0800) America/Anchorage'), ('America/Juneau', '(GMT-0800) America/Juneau'), ('America/Metlakatla', '(GMT-0800) America/Metlakatla'), ('America/Nome', '(GMT-0800) America/Nome'), ('America/Sitka', '(GMT-0800) America/Sitka'), ('America/Yakutat', '(GMT-0800) America/Yakutat'), ('Pacific/Pitcairn', '(GMT-0800) Pacific/Pitcairn'), ('US/Alaska', '(GMT-0800) US/Alaska'), ('America/Creston', '(GMT-0700) America/Creston'), ('America/Dawson', '(GMT-0700) America/Dawson'), ('America/Dawson_Creek', '(GMT-0700) America/Dawson_Creek'), ('America/Fort_Nelson', '(GMT-0700) America/Fort_Nelson'), ('America/Hermosillo', '(GMT-0700) America/Hermosillo'), ('America/Los_Angeles', '(GMT-0700) America/Los_Angeles'), ('America/Phoenix', '(GMT-0700) America/Phoenix'), ('America/Tijuana', '(GMT-0700) America/Tijuana'), ('America/Vancouver', '(GMT-0700) America/Vancouver'), ('America/Whitehorse', '(GMT-0700) America/Whitehorse'), ('Canada/Pacific', '(GMT-0700) Canada/Pacific'), ('US/Arizona', '(GMT-0700) US/Arizona'), ('US/Pacific', '(GMT-0700) US/Pacific'), ('America/Belize', '(GMT-0600) America/Belize'), ('America/Boise', '(GMT-0600) America/Boise'), ('America/Cambridge_Bay', '(GMT-0600) America/Cambridge_Bay'), ('America/Chihuahua', '(GMT-0600) America/Chihuahua'), ('America/Costa_Rica', '(GMT-0600) America/Costa_Rica'), ('America/Denver', '(GMT-0600) America/Denver'), ('America/Edmonton', '(GMT-0600) America/Edmonton'), ('America/El_Salvador', '(GMT-0600) America/El_Salvador'), ('America/Guatemala', '(GMT-0600) America/Guatemala'), ('America/Inuvik', '(GMT-0600) America/Inuvik'), ('America/Managua', '(GMT-0600) America/Managua'), ('America/Mazatlan', '(GMT-0600) America/Mazatlan'), ('America/Ojinaga', '(GMT-0600) America/Ojinaga'), ('America/Regina', '(GMT-0600) America/Regina'), ('America/Swift_Current', '(GMT-0600) America/Swift_Current'), ('America/Tegucigalpa', '(GMT-0600) America/Tegucigalpa'), ('America/Yellowknife', '(GMT-0600) America/Yellowknife'), ('Canada/Mountain', '(GMT-0600) Canada/Mountain'), ('Pacific/Galapagos', '(GMT-0600) Pacific/Galapagos'), ('US/Mountain', '(GMT-0600) US/Mountain'), ('America/Atikokan', '(GMT-0500) America/Atikokan'), ('America/Bahia_Banderas', '(GMT-0500) America/Bahia_Banderas'), ('America/Bogota', '(GMT-0500) America/Bogota'), ('America/Cancun', '(GMT-0500) America/Cancun'), ('America/Cayman', '(GMT-0500) America/Cayman'), ('America/Chicago', '(GMT-0500) America/Chicago'), ('America/Eirunepe', '(GMT-0500) America/Eirunepe'), ('America/Guayaquil', '(GMT-0500) America/Guayaquil'), ('America/Indiana/Knox', '(GMT-0500) America/Indiana/Knox'), ('America/Indiana/Tell_City', '(GMT-0500) America/Indiana/Tell_City'), ('America/Jamaica', '(GMT-0500) America/Jamaica'), ('America/Lima', '(GMT-0500) America/Lima'), ('America/Matamoros', '(GMT-0500) America/Matamoros'), ('America/Menominee', '(GMT-0500) America/Menominee'), ('America/Merida', '(GMT-0500) America/Merida'), ('America/Mexico_City', '(GMT-0500) America/Mexico_City'), ('America/Monterrey', '(GMT-0500) America/Monterrey'), ('America/North_Dakota/Beulah', '(GMT-0500) America/North_Dakota/Beulah'), ('America/North_Dakota/Center', '(GMT-0500) America/North_Dakota/Center'), ('America/North_Dakota/New_Salem', '(GMT-0500) America/North_Dakota/New_Salem'), ('America/Panama', '(GMT-0500) America/Panama'), ('America/Rainy_River', '(GMT-0500) America/Rainy_River'), ('America/Rankin_Inlet', '(GMT-0500) America/Rankin_Inlet'), ('America/Resolute', '(GMT-0500) America/Resolute'), ('America/Rio_Branco', '(GMT-0500) America/Rio_Branco'), ('America/Winnipeg', '(GMT-0500) America/Winnipeg'), ('Canada/Central', '(GMT-0500) Canada/Central'), ('Pacific/Easter', '(GMT-0500) Pacific/Easter'), ('US/Central', '(GMT-0500) US/Central'), ('America/Anguilla', '(GMT-0400) America/Anguilla'), ('America/Antigua', '(GMT-0400) America/Antigua'), ('America/Aruba', '(GMT-0400) America/Aruba'), ('America/Barbados', '(GMT-0400) America/Barbados'), ('America/Blanc-Sablon', '(GMT-0400) America/Blanc-Sablon'), ('America/Boa_Vista', '(GMT-0400) America/Boa_Vista'), ('America/Caracas', '(GMT-0400) America/Caracas'), ('America/Curacao', '(GMT-0400) America/Curacao'), ('America/Detroit', '(GMT-0400) America/Detroit'), ('America/Dominica', '(GMT-0400) America/Dominica'), ('America/Grand_Turk', '(GMT-0400) America/Grand_Turk'), ('America/Grenada', '(GMT-0400) America/Grenada'), ('America/Guadeloupe', '(GMT-0400) America/Guadeloupe'), ('America/Guyana', '(GMT-0400) America/Guyana'), ('America/Havana', '(GMT-0400) America/Havana'), ('America/Indiana/Indianapolis', '(GMT-0400) America/Indiana/Indianapolis'), ('America/Indiana/Marengo', '(GMT-0400) America/Indiana/Marengo'), ('America/Indiana/Petersburg', '(GMT-0400) America/Indiana/Petersburg'), ('America/Indiana/Vevay', '(GMT-0400) America/Indiana/Vevay'), ('America/Indiana/Vincennes', '(GMT-0400) America/Indiana/Vincennes'), ('America/Indiana/Winamac', '(GMT-0400) America/Indiana/Winamac'), ('America/Iqaluit', '(GMT-0400) America/Iqaluit'), ('America/Kentucky/Louisville', '(GMT-0400) America/Kentucky/Louisville'), ('America/Kentucky/Monticello', '(GMT-0400) America/Kentucky/Monticello'), ('America/Kralendijk', '(GMT-0400) America/Kralendijk'), ('America/La_Paz', '(GMT-0400) America/La_Paz'), ('America/Lower_Princes', '(GMT-0400) America/Lower_Princes'), ('America/Manaus', '(GMT-0400) America/Manaus'), ('America/Marigot', '(GMT-0400) America/Marigot'), ('America/Martinique', '(GMT-0400) America/Martinique'), ('America/Montserrat', '(GMT-0400) America/Montserrat'), ('America/Nassau', '(GMT-0400) America/Nassau'), ('America/New_York', '(GMT-0400) America/New_York'), ('America/Nipigon', '(GMT-0400) America/Nipigon'), ('America/Pangnirtung', '(GMT-0400) America/Pangnirtung'), ('America/Port-au-Prince', '(GMT-0400) America/Port-au-Prince'), ('America/Port_of_Spain', '(GMT-0400) America/Port_of_Spain'), ('America/Porto_Velho', '(GMT-0400) America/Porto_Velho'), ('America/Puerto_Rico', '(GMT-0400) America/Puerto_Rico'), ('America/Santo_Domingo', '(GMT-0400) America/Santo_Domingo'), ('America/St_Barthelemy', '(GMT-0400) America/St_Barthelemy'), ('America/St_Kitts', '(GMT-0400) America/St_Kitts'), ('America/St_Lucia', '(GMT-0400) America/St_Lucia'), ('America/St_Thomas', '(GMT-0400) America/St_Thomas'), ('America/St_Vincent', '(GMT-0400) America/St_Vincent'), ('America/Thunder_Bay', '(GMT-0400) America/Thunder_Bay'), ('America/Toronto', '(GMT-0400) America/Toronto'), ('America/Tortola', '(GMT-0400) America/Tortola'), ('Canada/Eastern', '(GMT-0400) Canada/Eastern'), ('US/Eastern', '(GMT-0400) US/Eastern'), ('America/Araguaina', '(GMT-0300) America/Araguaina'), ('America/Argentina/Buenos_Aires', '(GMT-0300) America/Argentina/Buenos_Aires'), ('America/Argentina/Catamarca', '(GMT-0300) America/Argentina/Catamarca'), ('America/Argentina/Cordoba', '(GMT-0300) America/Argentina/Cordoba'), ('America/Argentina/Jujuy', '(GMT-0300) America/Argentina/Jujuy'), ('America/Argentina/La_Rioja', '(GMT-0300) America/Argentina/La_Rioja'), ('America/Argentina/Mendoza', '(GMT-0300) America/Argentina/Mendoza'), ('America/Argentina/Rio_Gallegos', '(GMT-0300) America/Argentina/Rio_Gallegos'), ('America/Argentina/Salta', '(GMT-0300) America/Argentina/Salta'), ('America/Argentina/San_Juan', '(GMT-0300) America/Argentina/San_Juan'), ('America/Argentina/San_Luis', '(GMT-0300) America/Argentina/San_Luis'), ('America/Argentina/Tucuman', '(GMT-0300) America/Argentina/Tucuman'), ('America/Argentina/Ushuaia', '(GMT-0300) America/Argentina/Ushuaia'), ('America/Asuncion', '(GMT-0300) America/Asuncion'), ('America/Bahia', '(GMT-0300) America/Bahia'), ('America/Belem', '(GMT-0300) America/Belem'), ('America/Campo_Grande', '(GMT-0300) America/Campo_Grande'), ('America/Cayenne', '(GMT-0300) America/Cayenne'), ('America/Cuiaba', '(GMT-0300) America/Cuiaba'), ('America/Fortaleza', '(GMT-0300) America/Fortaleza'), ('America/Glace_Bay', '(GMT-0300) America/Glace_Bay'), ('America/Goose_Bay', '(GMT-0300) America/Goose_Bay'), ('America/Halifax', '(GMT-0300) America/Halifax'), ('America/Maceio', '(GMT-0300) America/Maceio'), ('America/Moncton', '(GMT-0300) America/Moncton'), ('America/Montevideo', '(GMT-0300) America/Montevideo'), ('America/Paramaribo', '(GMT-0300) America/Paramaribo'), ('America/Punta_Arenas', '(GMT-0300) America/Punta_Arenas'), ('America/Recife', '(GMT-0300) America/Recife'), ('America/Santarem', '(GMT-0300) America/Santarem'), ('America/Santiago', '(GMT-0300) America/Santiago'), ('America/Thule', '(GMT-0300) America/Thule'), ('Antarctica/Palmer', '(GMT-0300) Antarctica/Palmer'), ('Antarctica/Rothera', '(GMT-0300) Antarctica/Rothera'), ('Atlantic/Bermuda', '(GMT-0300) Atlantic/Bermuda'), ('Atlantic/Stanley', '(GMT-0300) Atlantic/Stanley'), ('Canada/Atlantic', '(GMT-0300) Canada/Atlantic'), ('America/St_Johns', '(GMT-0230) America/St_Johns'), ('Canada/Newfoundland', '(GMT-0230) Canada/Newfoundland'), ('America/Godthab', '(GMT-0200) America/Godthab'), ('America/Miquelon', '(GMT-0200) America/Miquelon'), ('America/Noronha', '(GMT-0200) America/Noronha'), ('America/Sao_Paulo', '(GMT-0200) America/Sao_Paulo'), ('Atlantic/South_Georgia', '(GMT-0200) Atlantic/South_Georgia'), ('Atlantic/Cape_Verde', '(GMT-0100) Atlantic/Cape_Verde'), ('Africa/Abidjan', '(GMT+0000) Africa/Abidjan'), ('Africa/Accra', '(GMT+0000) Africa/Accra'), ('Africa/Bamako', '(GMT+0000) Africa/Bamako'), ('Africa/Banjul', '(GMT+0000) Africa/Banjul'), ('Africa/Bissau', '(GMT+0000) Africa/Bissau'), ('Africa/Conakry', '(GMT+0000) Africa/Conakry'), ('Africa/Dakar', '(GMT+0000) Africa/Dakar'), ('Africa/Freetown', '(GMT+0000) Africa/Freetown'), ('Africa/Lome', '(GMT+0000) Africa/Lome'), ('Africa/Monrovia', '(GMT+0000) Africa/Monrovia'), ('Africa/Nouakchott', '(GMT+0000) Africa/Nouakchott'), ('Africa/Ouagadougou', '(GMT+0000) Africa/Ouagadougou'), ('Africa/Sao_Tome', '(GMT+0000) Africa/Sao_Tome'), ('America/Danmarkshavn', '(GMT+0000) America/Danmarkshavn'), ('America/Scoresbysund', '(GMT+0000) America/Scoresbysund'), ('Atlantic/Azores', '(GMT+0000) Atlantic/Azores'), ('Atlantic/Reykjavik', '(GMT+0000) Atlantic/Reykjavik'), ('Atlantic/St_Helena', '(GMT+0000) Atlantic/St_Helena'), ('GMT', '(GMT+0000) GMT'), ('UTC', '(GMT+0000) UTC'), ('Africa/Algiers', '(GMT+0100) Africa/Algiers'), ('Africa/Bangui', '(GMT+0100) Africa/Bangui'), ('Africa/Brazzaville', '(GMT+0100) Africa/Brazzaville'), ('Africa/Casablanca', '(GMT+0100) Africa/Casablanca'), ('Africa/Douala', '(GMT+0100) Africa/Douala'), ('Africa/El_Aaiun', '(GMT+0100) Africa/El_Aaiun'), ('Africa/Kinshasa', '(GMT+0100) Africa/Kinshasa'), ('Africa/Lagos', '(GMT+0100) Africa/Lagos'), ('Africa/Libreville', '(GMT+0100) Africa/Libreville'), ('Africa/Luanda', '(GMT+0100) Africa/Luanda'), ('Africa/Malabo', '(GMT+0100) Africa/Malabo'), ('Africa/Ndjamena', '(GMT+0100) Africa/Ndjamena'), ('Africa/Niamey', '(GMT+0100) Africa/Niamey'), ('Africa/Porto-Novo', '(GMT+0100) Africa/Porto-Novo'), ('Africa/Tunis', '(GMT+0100) Africa/Tunis'), ('Atlantic/Canary', '(GMT+0100) Atlantic/Canary'), ('Atlantic/Faroe', '(GMT+0100) Atlantic/Faroe'), ('Atlantic/Madeira', '(GMT+0100) Atlantic/Madeira'), ('Europe/Dublin', '(GMT+0100) Europe/Dublin'), ('Europe/Guernsey', '(GMT+0100) Europe/Guernsey'), ('Europe/Isle_of_Man', '(GMT+0100) Europe/Isle_of_Man'), ('Europe/Jersey', '(GMT+0100) Europe/Jersey'), ('Europe/Lisbon', '(GMT+0100) Europe/Lisbon'), ('Europe/London', '(GMT+0100) Europe/London'), ('Africa/Blantyre', '(GMT+0200) Africa/Blantyre'), ('Africa/Bujumbura', '(GMT+0200) Africa/Bujumbura'), ('Africa/Cairo', '(GMT+0200) Africa/Cairo'), ('Africa/Ceuta', '(GMT+0200) Africa/Ceuta'), ('Africa/Gaborone', '(GMT+0200) Africa/Gaborone'), ('Africa/Harare', '(GMT+0200) Africa/Harare'), ('Africa/Johannesburg', '(GMT+0200) Africa/Johannesburg'), ('Africa/Kigali', '(GMT+0200) Africa/Kigali'), ('Africa/Lubumbashi', '(GMT+0200) Africa/Lubumbashi'), ('Africa/Lusaka', '(GMT+0200) Africa/Lusaka'), ('Africa/Maputo', '(GMT+0200) Africa/Maputo'), ('Africa/Maseru', '(GMT+0200) Africa/Maseru'), ('Africa/Mbabane', '(GMT+0200) Africa/Mbabane'), ('Africa/Tripoli', '(GMT+0200) Africa/Tripoli'), ('Africa/Windhoek', '(GMT+0200) Africa/Windhoek'), ('Antarctica/Troll', '(GMT+0200) Antarctica/Troll'), ('Arctic/Longyearbyen', '(GMT+0200) Arctic/Longyearbyen'), ('Europe/Amsterdam', '(GMT+0200) Europe/Amsterdam'), ('Europe/Andorra', '(GMT+0200) Europe/Andorra'), ('Europe/Belgrade', '(GMT+0200) Europe/Belgrade'), ('Europe/Berlin', '(GMT+0200) Europe/Berlin'), ('Europe/Bratislava', '(GMT+0200) Europe/Bratislava'), ('Europe/Brussels', '(GMT+0200) Europe/Brussels'), ('Europe/Budapest', '(GMT+0200) Europe/Budapest'), ('Europe/Busingen', '(GMT+0200) Europe/Busingen'), ('Europe/Copenhagen', '(GMT+0200) Europe/Copenhagen'), ('Europe/Gibraltar', '(GMT+0200) Europe/Gibraltar'), ('Europe/Kaliningrad', '(GMT+0200) Europe/Kaliningrad'), ('Europe/Ljubljana', '(GMT+0200) Europe/Ljubljana'), ('Europe/Luxembourg', '(GMT+0200) Europe/Luxembourg'), ('Europe/Madrid', '(GMT+0200) Europe/Madrid'), ('Europe/Malta', '(GMT+0200) Europe/Malta'), ('Europe/Monaco', '(GMT+0200) Europe/Monaco'), ('Europe/Oslo', '(GMT+0200) Europe/Oslo'), ('Europe/Paris', '(GMT+0200) Europe/Paris'), ('Europe/Podgorica', '(GMT+0200) Europe/Podgorica'), ('Europe/Prague', '(GMT+0200) Europe/Prague'), ('Europe/Rome', '(GMT+0200) Europe/Rome'), ('Europe/San_Marino', '(GMT+0200) Europe/San_Marino'), ('Europe/Sarajevo', '(GMT+0200) Europe/Sarajevo'), ('Europe/Skopje', '(GMT+0200) Europe/Skopje'), ('Europe/Stockholm', '(GMT+0200) Europe/Stockholm'), ('Europe/Tirane', '(GMT+0200) Europe/Tirane'), ('Europe/Vaduz', '(GMT+0200) Europe/Vaduz'), ('Europe/Vatican', '(GMT+0200) Europe/Vatican'), ('Europe/Vienna', '(GMT+0200) Europe/Vienna'), ('Europe/Warsaw', '(GMT+0200) Europe/Warsaw'), ('Europe/Zagreb', '(GMT+0200) Europe/Zagreb'), ('Europe/Zurich', '(GMT+0200) Europe/Zurich'), ('Africa/Addis_Ababa', '(GMT+0300) Africa/Addis_Ababa'), ('Africa/Asmara', '(GMT+0300) Africa/Asmara'), ('Africa/Dar_es_Salaam', '(GMT+0300) Africa/Dar_es_Salaam'), ('Africa/Djibouti', '(GMT+0300) Africa/Djibouti'), ('Africa/Juba', '(GMT+0300) Africa/Juba'), ('Africa/Kampala', '(GMT+0300) Africa/Kampala'), ('Africa/Khartoum', '(GMT+0300) Africa/Khartoum'), ('Africa/Mogadishu', '(GMT+0300) Africa/Mogadishu'), ('Africa/Nairobi', '(GMT+0300) Africa/Nairobi'), ('Antarctica/Syowa', '(GMT+0300) Antarctica/Syowa'), ('Asia/Aden', '(GMT+0300) Asia/Aden'), ('Asia/Amman', '(GMT+0300) Asia/Amman'), ('Asia/Baghdad', '(GMT+0300) Asia/Baghdad'), ('Asia/Bahrain', '(GMT+0300) Asia/Bahrain'), ('Asia/Beirut', '(GMT+0300) Asia/Beirut'), ('Asia/Damascus', '(GMT+0300) Asia/Damascus'), ('Asia/Famagusta', '(GMT+0300) Asia/Famagusta'), ('Asia/Gaza', '(GMT+0300) Asia/Gaza'), ('Asia/Hebron', '(GMT+0300) Asia/Hebron'), ('Asia/Jerusalem', '(GMT+0300) Asia/Jerusalem'), ('Asia/Kuwait', '(GMT+0300) Asia/Kuwait'), ('Asia/Nicosia', '(GMT+0300) Asia/Nicosia'), ('Asia/Qatar', '(GMT+0300) Asia/Qatar'), ('Asia/Riyadh', '(GMT+0300) Asia/Riyadh'), ('Europe/Athens', '(GMT+0300) Europe/Athens'), ('Europe/Bucharest', '(GMT+0300) Europe/Bucharest'), ('Europe/Chisinau', '(GMT+0300) Europe/Chisinau'), ('Europe/Helsinki', '(GMT+0300) Europe/Helsinki'), ('Europe/Istanbul', '(GMT+0300) Europe/Istanbul'), ('Europe/Kiev', '(GMT+0300) Europe/Kiev'), ('Europe/Kirov', '(GMT+0300) Europe/Kirov'), ('Europe/Mariehamn', '(GMT+0300) Europe/Mariehamn'), ('Europe/Minsk', '(GMT+0300) Europe/Minsk'), ('Europe/Moscow', '(GMT+0300) Europe/Moscow'), ('Europe/Riga', '(GMT+0300) Europe/Riga'), ('Europe/Simferopol', '(GMT+0300) Europe/Simferopol'), ('Europe/Sofia', '(GMT+0300) Europe/Sofia'), ('Europe/Tallinn', '(GMT+0300) Europe/Tallinn'), ('Europe/Uzhgorod', '(GMT+0300) Europe/Uzhgorod'), ('Europe/Vilnius', '(GMT+0300) Europe/Vilnius'), ('Europe/Volgograd', '(GMT+0300) Europe/Volgograd'), ('Europe/Zaporozhye', '(GMT+0300) Europe/Zaporozhye'), ('Indian/Antananarivo', '(GMT+0300) Indian/Antananarivo'), ('Indian/Comoro', '(GMT+0300) Indian/Comoro'), ('Indian/Mayotte', '(GMT+0300) Indian/Mayotte'), ('Asia/Tehran', '(GMT+0330) Asia/Tehran'), ('Asia/Baku', '(GMT+0400) Asia/Baku'), ('Asia/Dubai', '(GMT+0400) Asia/Dubai'), ('Asia/Muscat', '(GMT+0400) Asia/Muscat'), ('Asia/Tbilisi', '(GMT+0400) Asia/Tbilisi'), ('Asia/Yerevan', '(GMT+0400) Asia/Yerevan'), ('Europe/Astrakhan', '(GMT+0400) Europe/Astrakhan'), ('Europe/Samara', '(GMT+0400) Europe/Samara'), ('Europe/Saratov', '(GMT+0400) Europe/Saratov'), ('Europe/Ulyanovsk', '(GMT+0400) Europe/Ulyanovsk'), ('Indian/Mahe', '(GMT+0400) Indian/Mahe'), ('Indian/Mauritius', '(GMT+0400) Indian/Mauritius'), ('Indian/Reunion', '(GMT+0400) Indian/Reunion'), ('Asia/Kabul', '(GMT+0430) Asia/Kabul'), ('Antarctica/Mawson', '(GMT+0500) Antarctica/Mawson'), ('Asia/Aqtau', '(GMT+0500) Asia/Aqtau'), ('Asia/Aqtobe', '(GMT+0500) Asia/Aqtobe'), ('Asia/Ashgabat', '(GMT+0500) Asia/Ashgabat'), ('Asia/Atyrau', '(GMT+0500) Asia/Atyrau'), ('Asia/Dushanbe', '(GMT+0500) Asia/Dushanbe'), ('Asia/Karachi', '(GMT+0500) Asia/Karachi'), ('Asia/Oral', '(GMT+0500) Asia/Oral'), ('Asia/Samarkand', '(GMT+0500) Asia/Samarkand'), ('Asia/Tashkent', '(GMT+0500) Asia/Tashkent'), ('Asia/Yekaterinburg', '(GMT+0500) Asia/Yekaterinburg'), ('Indian/Kerguelen', '(GMT+0500) Indian/Kerguelen'), ('Indian/Maldives', '(GMT+0500) Indian/Maldives'), ('Asia/Colombo', '(GMT+0530) Asia/Colombo'), ('Asia/Kolkata', '(GMT+0530) Asia/Kolkata'), ('Asia/Kathmandu', '(GMT+0545) Asia/Kathmandu'), ('Antarctica/Vostok', '(GMT+0600) Antarctica/Vostok'), ('Asia/Almaty', '(GMT+0600) Asia/Almaty'), ('Asia/Bishkek', '(GMT+0600) Asia/Bishkek'), ('Asia/Dhaka', '(GMT+0600) Asia/Dhaka'), ('Asia/Omsk', '(GMT+0600) Asia/Omsk'), ('Asia/Qyzylorda', '(GMT+0600) Asia/Qyzylorda'), ('Asia/Thimphu', '(GMT+0600) Asia/Thimphu'), ('Asia/Urumqi', '(GMT+0600) Asia/Urumqi'), ('Indian/Chagos', '(GMT+0600) Indian/Chagos'), ('Asia/Yangon', '(GMT+0630) Asia/Yangon'), ('Indian/Cocos', '(GMT+0630) Indian/Cocos'), ('Antarctica/Davis', '(GMT+0700) Antarctica/Davis'), ('Asia/Bangkok', '(GMT+0700) Asia/Bangkok'), ('Asia/Barnaul', '(GMT+0700) Asia/Barnaul'), ('Asia/Ho_Chi_Minh', '(GMT+0700) Asia/Ho_Chi_Minh'), ('Asia/Hovd', '(GMT+0700) Asia/Hovd'), ('Asia/Jakarta', '(GMT+0700) Asia/Jakarta'), ('Asia/Krasnoyarsk', '(GMT+0700) Asia/Krasnoyarsk'), ('Asia/Novokuznetsk', '(GMT+0700) Asia/Novokuznetsk'), ('Asia/Novosibirsk', '(GMT+0700) Asia/Novosibirsk'), ('Asia/Phnom_Penh', '(GMT+0700) Asia/Phnom_Penh'), ('Asia/Pontianak', '(GMT+0700) Asia/Pontianak'), ('Asia/Tomsk', '(GMT+0700) Asia/Tomsk'), ('Asia/Vientiane', '(GMT+0700) Asia/Vientiane'), ('Indian/Christmas', '(GMT+0700) Indian/Christmas'), ('Asia/Brunei', '(GMT+0800) Asia/Brunei'), ('Asia/Choibalsan', '(GMT+0800) Asia/Choibalsan'), ('Asia/Hong_Kong', '(GMT+0800) Asia/Hong_Kong'), ('Asia/Irkutsk', '(GMT+0800) Asia/Irkutsk'), ('Asia/Kuala_Lumpur', '(GMT+0800) Asia/Kuala_Lumpur'), ('Asia/Kuching', '(GMT+0800) Asia/Kuching'), ('Asia/Macau', '(GMT+0800) Asia/Macau'), ('Asia/Makassar', '(GMT+0800) Asia/Makassar'), ('Asia/Manila', '(GMT+0800) Asia/Manila'), ('Asia/Shanghai', '(GMT+0800) Asia/Shanghai'), ('Asia/Singapore', '(GMT+0800) Asia/Singapore'), ('Asia/Taipei', '(GMT+0800) Asia/Taipei'), ('Asia/Ulaanbaatar', '(GMT+0800) Asia/Ulaanbaatar'), ('Australia/Perth', '(GMT+0800) Australia/Perth'), ('Asia/Pyongyang', '(GMT+0830) Asia/Pyongyang'), ('Australia/Eucla', '(GMT+0845) Australia/Eucla'), ('Asia/Chita', '(GMT+0900) Asia/Chita'), ('Asia/Dili', '(GMT+0900) Asia/Dili'), ('Asia/Jayapura', '(GMT+0900) Asia/Jayapura'), ('Asia/Khandyga', '(GMT+0900) Asia/Khandyga'), ('Asia/Seoul', '(GMT+0900) Asia/Seoul'), ('Asia/Tokyo', '(GMT+0900) Asia/Tokyo'), ('Asia/Yakutsk', '(GMT+0900) Asia/Yakutsk'), ('Pacific/Palau', '(GMT+0900) Pacific/Palau'), ('Australia/Darwin', '(GMT+0930) Australia/Darwin'), ('Antarctica/DumontDUrville', '(GMT+1000) Antarctica/DumontDUrville'), ('Asia/Ust-Nera', '(GMT+1000) Asia/Ust-Nera'), ('Asia/Vladivostok', '(GMT+1000) Asia/Vladivostok'), ('Australia/Brisbane', '(GMT+1000) Australia/Brisbane'), ('Australia/Lindeman', '(GMT+1000) Australia/Lindeman'), ('Pacific/Chuuk', '(GMT+1000) Pacific/Chuuk'), ('Pacific/Guam', '(GMT+1000) Pacific/Guam'), ('Pacific/Port_Moresby', '(GMT+1000) Pacific/Port_Moresby'), ('Pacific/Saipan', '(GMT+1000) Pacific/Saipan'), ('Australia/Adelaide', '(GMT+1030) Australia/Adelaide'), ('Australia/Broken_Hill', '(GMT+1030) Australia/Broken_Hill'), ('Antarctica/Casey', '(GMT+1100) Antarctica/Casey'), ('Antarctica/Macquarie', '(GMT+1100) Antarctica/Macquarie'), ('Asia/Magadan', '(GMT+1100) Asia/Magadan'), ('Asia/Sakhalin', '(GMT+1100) Asia/Sakhalin'), ('Asia/Srednekolymsk', '(GMT+1100) Asia/Srednekolymsk'), ('Australia/Currie', '(GMT+1100) Australia/Currie'), ('Australia/Hobart', '(GMT+1100) Australia/Hobart'), ('Australia/Lord_Howe', '(GMT+1100) Australia/Lord_Howe'), ('Australia/Melbourne', '(GMT+1100) Australia/Melbourne'), ('Australia/Sydney', '(GMT+1100) Australia/Sydney'), ('Pacific/Bougainville', '(GMT+1100) Pacific/Bougainville'), ('Pacific/Efate', '(GMT+1100) Pacific/Efate'), ('Pacific/Guadalcanal', '(GMT+1100) Pacific/Guadalcanal'), ('Pacific/Kosrae', '(GMT+1100) Pacific/Kosrae'), ('Pacific/Norfolk', '(GMT+1100) Pacific/Norfolk'), ('Pacific/Noumea', '(GMT+1100) Pacific/Noumea'), ('Pacific/Pohnpei', '(GMT+1100) Pacific/Pohnpei'), ('Asia/Anadyr', '(GMT+1200) Asia/Anadyr'), ('Asia/Kamchatka', '(GMT+1200) Asia/Kamchatka'), ('Pacific/Fiji', '(GMT+1200) Pacific/Fiji'), ('Pacific/Funafuti', '(GMT+1200) Pacific/Funafuti'), ('Pacific/Kwajalein', '(GMT+1200) Pacific/Kwajalein'), ('Pacific/Majuro', '(GMT+1200) Pacific/Majuro'), ('Pacific/Nauru', '(GMT+1200) Pacific/Nauru'), ('Pacific/Tarawa', '(GMT+1200) Pacific/Tarawa'), ('Pacific/Wake', '(GMT+1200) Pacific/Wake'), ('Pacific/Wallis', '(GMT+1200) Pacific/Wallis'), ('Antarctica/McMurdo', '(GMT+1300) Antarctica/McMurdo'), ('Pacific/Auckland', '(GMT+1300) Pacific/Auckland'), ('Pacific/Enderbury', '(GMT+1300) Pacific/Enderbury'), ('Pacific/Fakaofo', '(GMT+1300) Pacific/Fakaofo'), ('Pacific/Tongatapu', '(GMT+1300) Pacific/Tongatapu'), ('Pacific/Chatham', '(GMT+1345) Pacific/Chatham'), ('Pacific/Apia', '(GMT+1400) Pacific/Apia'), ('Pacific/Kiritimati', '(GMT+1400) Pacific/Kiritimati')], help_text='By selecting this, you will see all the dates on AstroBin in your timezone.', max_length=255, null=True, verbose_name='Timezone')),
                ('about', models.TextField(blank=True, help_text='Write something about yourself. HTML tags are allowed.', null=True, verbose_name='About you')),
                ('premium_counter', models.PositiveIntegerField(default=0, editable=False)),
                ('company_name', models.CharField(blank=True, help_text='The name of the company you represent on AstroBin.', max_length=128, null=True, verbose_name='Company name')),
                ('company_description', models.TextField(blank=True, help_text='A short description of the company you represent on AstroBin. You can use some <a href="/faq/#comments">formatting rules</a>.', null=True, validators=[django.core.validators.MaxLengthValidator(1000)], verbose_name='Company description')),
                ('company_website', models.URLField(blank=True, help_text='The website of the company you represent on AstroBin.', max_length=512, null=True, verbose_name='Company website')),
                ('retailer_country', astrobin.fields.CountryField(blank=True, choices=[('', '---------'), ('GB', 'United Kingdom'), ('AF', 'Afghanistan'), ('AX', 'Aland Islands'), ('AL', 'Albania'), ('DZ', 'Algeria'), ('AS', 'American Samoa'), ('AD', 'Andorra'), ('AO', 'Angola'), ('AI', 'Anguilla'), ('AQ', 'Antarctica'), ('AG', 'Antigua and Barbuda'), ('AR', 'Argentina'), ('AM', 'Armenia'), ('AW', 'Aruba'), ('AU', 'Australia'), ('AT', 'Austria'), ('AZ', 'Azerbaijan'), ('BS', 'Bahamas'), ('BH', 'Bahrain'), ('BD', 'Bangladesh'), ('BB', 'Barbados'), ('BY', 'Belarus'), ('BE', 'Belgium'), ('BZ', 'Belize'), ('BJ', 'Benin'), ('BM', 'Bermuda'), ('BT', 'Bhutan'), ('BO', 'Bolivia'), ('BA', 'Bosnia and Herzegovina'), ('BW', 'Botswana'), ('BV', 'Bouvet Island'), ('BR', 'Brazil'), ('IO', 'British Indian Ocean Territory'), ('BN', 'Brunei Darussalam'), ('BG', 'Bulgaria'), ('BF', 'Burkina Faso'), ('BI', 'Burundi'), ('KH', 'Cambodia'), ('CM', 'Cameroon'), ('CA', 'Canada'), ('CV', 'Cape Verde'), ('KY', 'Cayman Islands'), ('CF', 'Central African Republic'), ('TD', 'Chad'), ('CL', 'Chile'), ('CN', 'China'), ('CX', 'Christmas Island'), ('CC', 'Cocos (Keeling) Islands'), ('CO', 'Colombia'), ('KM', 'Comoros'), ('CG', 'Congo'), ('CD', 'Congo, The Democratic Republic of the'), ('CK', 'Cook Islands'), ('CR', 'Costa Rica'), ('CI', "Cote d'Ivoire"), ('HR', 'Croatia'), ('CU', 'Cuba'), ('CY', 'Cyprus'), ('CZ', 'Czech Republic'), ('DK', 'Denmark'), ('DJ', 'Djibouti'), ('DM', 'Dominica'), ('DO', 'Dominican Republic'), ('EC', 'Ecuador'), ('EG', 'Egypt'), ('SV', 'El Salvador'), ('GQ', 'Equatorial Guinea'), ('ER', 'Eritrea'), ('EE', 'Estonia'), ('ET', 'Ethiopia'), ('FK', 'Falkland Islands (Malvinas)'), ('FO', 'Faroe Islands'), ('FJ', 'Fiji'), ('FI', 'Finland'), ('FR', 'France'), ('GF', 'French Guiana'), ('PF', 'French Polynesia'), ('TF', 'French Southern Territories'), ('GA', 'Gabon'), ('GM', 'Gambia'), ('GE', 'Georgia'), ('DE', 'Germany'), ('GH', 'Ghana'), ('GI', 'Gibraltar'), ('GR', 'Greece'), ('GL', 'Greenland'), ('GD', 'Grenada'), ('GP', 'Guadeloupe'), ('GU', 'Guam'), ('GT', 'Guatemala'), ('GG', 'Guernsey'), ('GN', 'Guinea'), ('GW', 'Guinea-Bissau'), ('GY', 'Guyana'), ('HT', 'Haiti'), ('HM', 'Heard Island and McDonald Islands'), ('VA', 'Holy See (Vatican City State)'), ('HN', 'Honduras'), ('HK', 'Hong Kong'), ('HU', 'Hungary'), ('IS', 'Iceland'), ('IN', 'India'), ('ID', 'Indonesia'), ('IR', 'Iran, Islamic Republic of'), ('IQ', 'Iraq'), ('IE', 'Ireland'), ('IM', 'Isle of Man'), ('IL', 'Israel'), ('IT', 'Italy'), ('JM', 'Jamaica'), ('JP', 'Japan'), ('JE', 'Jersey'), ('JO', 'Jordan'), ('KZ', 'Kazakhstan'), ('KE', 'Kenya'), ('KI', 'Kiribati'), ('KP', "Korea, Democratic People's Republic of"), ('KR', 'Korea, Republic of'), ('KW', 'Kuwait'), ('KG', 'Kyrgyzstan'), ('LA', "Lao People's Democratic Republic"), ('LV', 'Latvia'), ('LB', 'Lebanon'), ('LS', 'Lesotho'), ('LR', 'Liberia'), ('LY', 'Libyan Arab Jamahiriya'), ('LI', 'Liechtenstein'), ('LT', 'Lithuania'), ('LU', 'Luxembourg'), ('MO', 'Macao'), ('MK', 'Macedonia, The Former Yugoslav Republic of'), ('MG', 'Madagascar'), ('MW', 'Malawi'), ('MY', 'Malaysia'), ('MV', 'Maldives'), ('ML', 'Mali'), ('MT', 'Malta'), ('MH', 'Marshall Islands'), ('MQ', 'Martinique'), ('MR', 'Mauritania'), ('MU', 'Mauritius'), ('YT', 'Mayotte'), ('MX', 'Mexico'), ('FM', 'Micronesia, Federated States of'), ('MD', 'Moldova'), ('MC', 'Monaco'), ('MN', 'Mongolia'), ('ME', 'Montenegro'), ('MS', 'Montserrat'), ('MA', 'Morocco'), ('MZ', 'Mozambique'), ('MM', 'Myanmar'), ('NA', 'Namibia'), ('NR', 'Nauru'), ('NP', 'Nepal'), ('NL', 'Netherlands'), ('AN', 'Netherlands Antilles'), ('NC', 'New Caledonia'), ('NZ', 'New Zealand'), ('NI', 'Nicaragua'), ('NE', 'Niger'), ('NG', 'Nigeria'), ('NU', 'Niue'), ('NF', 'Norfolk Island'), ('MP', 'Northern Mariana Islands'), ('NO', 'Norway'), ('OM', 'Oman'), ('PK', 'Pakistan'), ('PW', 'Palau'), ('PS', 'Palestinian Territory, Occupied'), ('PA', 'Panama'), ('PG', 'Papua New Guinea'), ('PY', 'Paraguay'), ('PE', 'Peru'), ('PH', 'Philippines'), ('PN', 'Pitcairn'), ('PL', 'Poland'), ('PT', 'Portugal'), ('PR', 'Puerto Rico'), ('QA', 'Qatar'), ('RE', 'Reunion'), ('RO', 'Romania'), ('RU', 'Russian Federation'), ('RW', 'Rwanda'), ('BL', 'Saint Barthelemy'), ('SH', 'Saint Helena'), ('KN', 'Saint Kitts and Nevis'), ('LC', 'Saint Lucia'), ('MF', 'Saint Martin'), ('PM', 'Saint Pierre and Miquelon'), ('VC', 'Saint Vincent and the Grenadines'), ('WS', 'Samoa'), ('SM', 'San Marino'), ('ST', 'Sao Tome and Principe'), ('SA', 'Saudi Arabia'), ('SN', 'Senegal'), ('RS', 'Serbia'), ('SC', 'Seychelles'), ('SL', 'Sierra Leone'), ('SG', 'Singapore'), ('SK', 'Slovakia'), ('SI', 'Slovenia'), ('SB', 'Solomon Islands'), ('SO', 'Somalia'), ('ZA', 'South Africa'), ('GS', 'South Georgia and the South Sandwich Islands'), ('ES', 'Spain'), ('LK', 'Sri Lanka'), ('SD', 'Sudan'), ('SR', 'Suriname'), ('SJ', 'Svalbard and Jan Mayen'), ('SZ', 'Swaziland'), ('SE', 'Sweden'), ('CH', 'Switzerland'), ('SY', 'Syrian Arab Republic'), ('TW', 'Taiwan, Province of China'), ('TJ', 'Tajikistan'), ('TZ', 'Tanzania, United Republic of'), ('TH', 'Thailand'), ('TL', 'Timor-Leste'), ('TG', 'Togo'), ('TK', 'Tokelau'), ('TO', 'Tonga'), ('TT', 'Trinidad and Tobago'), ('TN', 'Tunisia'), ('TR', 'Turkey'), ('TM', 'Turkmenistan'), ('TC', 'Turks and Caicos Islands'), ('TV', 'Tuvalu'), ('UG', 'Uganda'), ('UA', 'Ukraine'), ('AE', 'United Arab Emirates'), ('US', 'United States'), ('UM', 'United States Minor Outlying Islands'), ('UY', 'Uruguay'), ('UZ', 'Uzbekistan'), ('VU', 'Vanuatu'), ('VE', 'Venezuela'), ('VN', 'Viet Nam'), ('VG', 'Virgin Islands, British'), ('VI', 'Virgin Islands, U.S.'), ('WF', 'Wallis and Futuna'), ('EH', 'Western Sahara'), ('YE', 'Yemen'), ('ZM', 'Zambia'), ('ZW', 'Zimbabwe')], max_length=2, null=True, verbose_name='Country of operation')),
                ('avatar', models.CharField(blank=True, editable=False, max_length=64, null=True)),
                ('exclude_from_competitions', models.BooleanField(default=False)),
                ('default_frontpage_section', models.CharField(choices=[('global', 'Global stream'), ('personal', 'Personal stream'), ('recent', 'All uploaded images'), ('followed', 'All images uploaded by people you follow')], default=b'global', max_length=16, verbose_name='Default front page view')),
                ('default_gallery_sorting', models.SmallIntegerField(choices=[(0, 'Upload time'), (1, 'Acquisition time'), (2, 'Subject type'), (3, 'Year'), (4, 'Gear'), (5, 'Collections'), (6, 'Title')], default=0, verbose_name='Default gallery sorting')),
                ('default_license', models.IntegerField(choices=[(0, 'None (All rights reserved)'), (1, 'Attribution-NonCommercial-ShareAlike Creative Commons'), (2, 'Attribution-NonCommercial Creative Commons'), (3, 'Attribution-NonCommercial-NoDerivs Creative Commons'), (4, 'Attribution Creative Commons'), (5, 'Attribution-ShareAlike Creative Commons'), (6, 'Attribution-NoDerivs Creative Commons')], default=0, help_text='The license you select here is automatically applied to all your new images.', verbose_name='Default license')),
                ('default_watermark_text', models.CharField(blank=True, editable=False, max_length=128, null=True)),
                ('default_watermark', models.BooleanField(default=False, editable=False)),
                ('default_watermark_size', models.CharField(choices=[('S', 'Small'), ('M', 'Medium'), ('L', 'Large')], default=b'M', editable=False, max_length=1)),
                ('default_watermark_position', models.IntegerField(choices=[(0, 'Center'), (1, 'Top left'), (2, 'Top center'), (3, 'Top right'), (4, 'Bottom left'), (5, 'Bottom center'), (6, 'Bottom right')], default=0, editable=False)),
                ('default_watermark_opacity', models.IntegerField(default=10, editable=False)),
                ('language', models.CharField(blank=True, choices=[('en', 'English'), ('it', 'Italian'), ('es', 'Spanish'), ('fr', 'French'), ('fi', 'Finnish'), ('de', 'German'), ('nl', 'Dutch'), ('tr', 'Turkish'), ('sq', 'Albanian'), ('pl', 'Polish'), ('pt-BR', 'Brazilian Portuguese'), ('el', 'Greek'), ('ru', 'Russian'), ('ar', 'Arabic'), ('ja', 'Japanese')], max_length=8, null=True, verbose_name='Language')),
                ('seen_realname', models.BooleanField(default=False, editable=False)),
                ('signature', models.TextField(blank=True, max_length=1024, verbose_name='Signature')),
                ('signature_html', models.TextField(blank=True, max_length=1054, verbose_name='Signature HTML Version')),
                ('show_signatures', models.BooleanField(default=True, verbose_name='Show signatures')),
                ('post_count', models.IntegerField(blank=True, default=0, verbose_name='Post count')),
                ('autosubscribe', models.BooleanField(default=True, help_text='Automatically subscribe to topics that you answer', verbose_name='Automatically subscribe')),
                ('receive_forum_emails', models.BooleanField(default=True, verbose_name='Receive e-mails from subscribed forum topics')),
                ('user', models.OneToOneField(editable=False, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Accessory',
            fields=[
                ('gear_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='astrobin.Gear')),
            ],
            bases=('astrobin.gear',),
        ),
        migrations.CreateModel(
            name='Camera',
            fields=[
                ('gear_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='astrobin.Gear')),
                ('pixel_size', models.DecimalField(blank=True, decimal_places=2, help_text='(in &mu;m)', max_digits=6, null=True, verbose_name='Pixel size')),
                ('sensor_width', models.DecimalField(blank=True, decimal_places=2, help_text='(in mm)', max_digits=6, null=True, verbose_name='Sensor width')),
                ('sensor_height', models.DecimalField(blank=True, decimal_places=2, help_text='(in mm)', max_digits=6, null=True, verbose_name='Sensor height')),
                ('type', models.IntegerField(blank=True, choices=[(0, 'CCD'), (1, 'DSLR'), (2, 'Guider/Planetary'), (3, 'Film'), (4, 'Compact'), (5, 'Video camera')], null=True, verbose_name='Type')),
            ],
            bases=('astrobin.gear',),
        ),
        migrations.CreateModel(
            name='DeepSky_Acquisition',
            fields=[
                ('acquisition_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='astrobin.Acquisition')),
                ('is_synthetic', models.BooleanField(default=False, verbose_name='Synthetic channel')),
                ('binning', models.IntegerField(blank=True, choices=[(1, '1x1'), (2, '2x2'), (3, '3x3'), (4, '4x4')], default=0, null=True, verbose_name='Binning')),
                ('number', models.IntegerField(blank=True, help_text='The number of sub-frames.', null=True, verbose_name='Number')),
                ('duration', models.IntegerField(blank=True, help_text='Duration of each sub-frame, in seconds.', null=True, verbose_name='Duration')),
                ('iso', models.IntegerField(blank=True, null=True, verbose_name='ISO')),
                ('gain', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True, verbose_name='Gain')),
                ('sensor_cooling', models.IntegerField(blank=True, help_text='The temperature of the chip. E.g.: -20.', null=True, verbose_name='Sensor cooling')),
                ('darks', models.IntegerField(blank=True, help_text='The number of dark frames.', null=True, verbose_name='Darks')),
                ('flats', models.IntegerField(blank=True, help_text='The number of flat frames.', null=True, verbose_name='Flats')),
                ('flat_darks', models.IntegerField(blank=True, help_text='The number of dark flat frames.', null=True, verbose_name='Flat darks')),
                ('bias', models.IntegerField(blank=True, help_text='The number of bias/offset frames.', null=True, verbose_name='Bias')),
                ('bortle', models.IntegerField(blank=True, choices=[(1, '1 - Excellent dark-site sky (BLACK)'), (2, '2 - Typical truly dark site (GRAY)'), (3, '3 - Rural sky (BLUE)'), (4, '4 - Rural/suburban transition (GREEN/YELLOW)'), (5, '5 - Suburban sky (ORANGE)'), (6, '6 - Bright suburban sky (RED)'), (7, '7 - Suburban/urban transition or Full Moon (RED)'), (8, '8 - City sky (WHITE)'), (9, '9 - Inner city sky (WHITE)')], help_text='Quality of the sky according to <a href="http://en.wikipedia.org/wiki/Bortle_Dark-Sky_Scale" target="_blank">the Bortle Scale</a>.', null=True, verbose_name='Bortle Dark-Sky Scale')),
                ('mean_sqm', models.DecimalField(blank=True, decimal_places=2, help_text='As measured with your Sky Quality Meter.', max_digits=5, null=True, verbose_name='Mean mag/arcsec^2')),
                ('mean_fwhm', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True, verbose_name='Mean FWHM')),
                ('temperature', models.DecimalField(blank=True, decimal_places=2, help_text='Ambient temperature (in Centigrade degrees).', max_digits=5, null=True, verbose_name='Temperature')),
                ('advanced', models.BooleanField(default=False, editable=False)),
                ('saved_on', models.DateTimeField(auto_now=True, null=True)),
            ],
            options={
                'ordering': ['-saved_on', 'filter'],
            },
            bases=('astrobin.acquisition',),
        ),
        migrations.CreateModel(
            name='Filter',
            fields=[
                ('gear_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='astrobin.Gear')),
                ('type', models.IntegerField(blank=True, choices=[(0, 'Clear or color'), (1, 'Broadband: H-Alpha'), (2, 'Broadband: H-Beta'), (3, 'Broadband: S-II'), (4, 'Broadband: O-III'), (5, 'Broadband: N-II'), (6, 'Narrowband: H-Alpha'), (7, 'Narrowband: H-Beta'), (8, 'Narrowband: S-II'), (9, 'Narrowband: O-III'), (10, 'Narrowband: N-II'), (11, 'Light pollution suppression'), (12, 'Planetary'), (13, 'Other'), (14, 'UHC: Ultra High Contrast')], null=True, verbose_name='Type')),
                ('bandwidth', models.DecimalField(blank=True, decimal_places=2, help_text='(in nm)', max_digits=6, null=True, verbose_name='Bandwidth')),
            ],
            bases=('astrobin.gear',),
        ),
        migrations.CreateModel(
            name='FocalReducer',
            fields=[
                ('gear_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='astrobin.Gear')),
            ],
            bases=('astrobin.gear',),
        ),
        migrations.CreateModel(
            name='ImageRequest',
            fields=[
                ('request_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='astrobin.Request')),
                ('type', models.CharField(choices=[('INFO', 'Additional information'), ('FITS', 'TIFF/FITS'), ('HIRES', 'Higher resolution')], max_length=8)),
            ],
            bases=('astrobin.request',),
        ),
        migrations.CreateModel(
            name='Mount',
            fields=[
                ('gear_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='astrobin.Gear')),
                ('max_payload', models.DecimalField(blank=True, decimal_places=2, help_text='(in kg)', max_digits=6, null=True, verbose_name='Max. payload')),
                ('pe', models.DecimalField(blank=True, decimal_places=2, help_text='(peak to peak, in arcseconds)', max_digits=6, null=True, verbose_name='Periodic error')),
            ],
            bases=('astrobin.gear',),
        ),
        migrations.CreateModel(
            name='Software',
            fields=[
                ('gear_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='astrobin.Gear')),
                ('type', models.IntegerField(blank=True, choices=[(0, 'Open source or freeware'), (1, 'Paid')], null=True, verbose_name='Type')),
            ],
            bases=('astrobin.gear',),
        ),
        migrations.CreateModel(
            name='SolarSystem_Acquisition',
            fields=[
                ('acquisition_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='astrobin.Acquisition')),
                ('frames', models.IntegerField(blank=True, help_text='The total number of frames you have stacked.', null=True, verbose_name='Number of frames')),
                ('fps', models.DecimalField(blank=True, decimal_places=5, help_text='Frames per second.', max_digits=12, null=True, verbose_name='FPS')),
                ('focal_length', models.IntegerField(blank=True, help_text='The focal length of the whole optical train, including barlow lenses or other components.', null=True, verbose_name='Focal length')),
                ('cmi', models.DecimalField(blank=True, decimal_places=2, help_text='Latitude of the first Central Meridian.', max_digits=5, null=True, verbose_name='CMI')),
                ('cmii', models.DecimalField(blank=True, decimal_places=2, help_text='Latitude of the second Central Meridian.', max_digits=5, null=True, verbose_name='CMII')),
                ('cmiii', models.DecimalField(blank=True, decimal_places=2, help_text='Latitude of the third Central Meridian.', max_digits=5, null=True, verbose_name='CMIII')),
                ('seeing', models.IntegerField(blank=True, help_text='Your estimation of the seeing, on a scale from 1 to 5.', null=True, verbose_name='Seeing')),
                ('transparency', models.IntegerField(blank=True, help_text='Your estimation of the transparency, on a scale from 1 to 10.', null=True, verbose_name='Transparency')),
                ('time', models.CharField(blank=True, help_text='Please use the following format: hh:mm.', max_length=5, null=True, verbose_name='Time')),
            ],
            bases=('astrobin.acquisition',),
        ),
        migrations.CreateModel(
            name='Telescope',
            fields=[
                ('gear_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='astrobin.Gear')),
                ('aperture', models.DecimalField(blank=True, decimal_places=2, help_text='(in mm)', max_digits=8, null=True, verbose_name='Aperture')),
                ('focal_length', models.DecimalField(blank=True, decimal_places=2, help_text='(in mm)', max_digits=8, null=True, verbose_name='Focal length')),
                ('type', models.IntegerField(blank=True, choices=[(0, 'Refractor: achromatic'), (1, 'Refractor: semi-apochromatic'), (2, 'Refractor: apochromatic'), (3, 'Refractor: non-achromatic Galilean'), (4, 'Refractor: non-achromatic Keplerian'), (5, 'Refractor: superachromat'), (6, 'Reflector: Dall-Kirkham'), (7, 'Reflector: Nasmyth'), (8, 'Reflector: Ritchey Chretien'), (9, 'Reflector: Gregorian'), (10, 'Reflector: Herschellian'), (11, 'Reflector: Newtonian'), (12, 'Catadioptric: Argunov-Cassegrain'), (13, 'Catadioptric: Klevtsov-Cassegrain'), (14, 'Catadioptric: Lurie-Houghton'), (15, 'Catadioptric: Maksutov'), (16, 'Catadioptric: Maksutov-Cassegrain'), (17, 'Catadioptric: modified Dall-Kirkham'), (18, 'Catadioptric: Schmidt camera'), (19, 'Catadioptric: Schmidt-Cassegrain'), (20, 'Catadioptric: ACF Schmidt-Cassegrain'), (21, 'Camera lens'), (22, 'Binoculars')], null=True, verbose_name='Type')),
            ],
            bases=('astrobin.gear',),
        ),
        migrations.AddField(
            model_name='request',
            name='from_user',
            field=models.ForeignKey(editable=False, on_delete=django.db.models.deletion.CASCADE, related_name='requester', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='request',
            name='to_user',
            field=models.ForeignKey(editable=False, on_delete=django.db.models.deletion.CASCADE, related_name='requestee', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='location',
            name='user',
            field=models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.CASCADE, to='astrobin.UserProfile'),
        ),
        migrations.AddField(
            model_name='image',
            name='locations',
            field=models.ManyToManyField(blank=True, help_text='Drag items from the right side to the left side, or click on the plus sign.', null=True, to='astrobin.Location', verbose_name='Locations'),
        ),
        migrations.AddField(
            model_name='image',
            name='moderated_by',
            field=models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='images_moderated', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='image',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='gearuserinfo',
            name='gear',
            field=models.ForeignKey(editable=False, on_delete=django.db.models.deletion.CASCADE, to='astrobin.Gear'),
        ),
        migrations.AddField(
            model_name='gearuserinfo',
            name='user',
            field=models.ForeignKey(editable=False, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='gearassistedmerge',
            name='master',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='assisted_master', to='astrobin.Gear'),
        ),
        migrations.AddField(
            model_name='gearassistedmerge',
            name='slave',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='assisted_slave', to='astrobin.Gear'),
        ),
        migrations.AddField(
            model_name='gear',
            name='commercial',
            field=models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='base_gear', to='astrobin.CommercialGear'),
        ),
        migrations.AddField(
            model_name='gear',
            name='master',
            field=models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.CASCADE, to='astrobin.Gear'),
        ),
        migrations.AddField(
            model_name='gear',
            name='retailed',
            field=models.ManyToManyField(to='astrobin.RetailedGear'),
        ),
        migrations.AddField(
            model_name='commercialgear',
            name='image',
            field=models.ForeignKey(blank=True, help_text='The official, commercial image for this product. Upload an image via the regular uploading interface, set its subject type to "Gear", and then choose it from this list. If you upload several revisions, they will also appear in the commercial page.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='featured_gear', to='astrobin.Image', verbose_name='Image'),
        ),
        migrations.AddField(
            model_name='commercialgear',
            name='producer',
            field=models.ForeignKey(editable=False, on_delete=django.db.models.deletion.CASCADE, related_name='commercial_gear', to=settings.AUTH_USER_MODEL, verbose_name='Producer'),
        ),
        migrations.AddField(
            model_name='collection',
            name='cover',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='astrobin.Image', verbose_name='Cover image'),
        ),
        migrations.AddField(
            model_name='collection',
            name='images',
            field=models.ManyToManyField(blank=True, null=True, related_name='collections', to='astrobin.Image', verbose_name='Images'),
        ),
        migrations.AddField(
            model_name='collection',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='acquisition',
            name='image',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='astrobin.Image', verbose_name='Image'),
        ),
        migrations.AddField(
            model_name='userprofile',
            name='accessories',
            field=models.ManyToManyField(blank=True, null=True, related_name='accessories', to='astrobin.Accessory', verbose_name='Accessories'),
        ),
        migrations.AddField(
            model_name='userprofile',
            name='cameras',
            field=models.ManyToManyField(blank=True, null=True, related_name='cameras', to='astrobin.Camera', verbose_name='Cameras'),
        ),
        migrations.AddField(
            model_name='userprofile',
            name='filters',
            field=models.ManyToManyField(blank=True, null=True, related_name='filters', to='astrobin.Filter', verbose_name='Filters'),
        ),
        migrations.AddField(
            model_name='userprofile',
            name='focal_reducers',
            field=models.ManyToManyField(blank=True, null=True, related_name='focal_reducers', to='astrobin.FocalReducer', verbose_name='Focal reducers'),
        ),
        migrations.AddField(
            model_name='userprofile',
            name='mounts',
            field=models.ManyToManyField(blank=True, null=True, related_name='mounts', to='astrobin.Mount', verbose_name='Mounts'),
        ),
        migrations.AddField(
            model_name='userprofile',
            name='software',
            field=models.ManyToManyField(blank=True, null=True, related_name='software', to='astrobin.Software', verbose_name='Software'),
        ),
        migrations.AddField(
            model_name='userprofile',
            name='telescopes',
            field=models.ManyToManyField(blank=True, null=True, related_name='telescopes', to='astrobin.Telescope', verbose_name='Telescopes and lenses'),
        ),
        migrations.AlterUniqueTogether(
            name='imagerevision',
            unique_together=set([('image', 'label')]),
        ),
        migrations.AddField(
            model_name='imagerequest',
            name='image',
            field=models.ForeignKey(editable=False, on_delete=django.db.models.deletion.CASCADE, to='astrobin.Image'),
        ),
        migrations.AddField(
            model_name='image',
            name='accessories',
            field=models.ManyToManyField(blank=True, null=True, to='astrobin.Accessory', verbose_name='Accessories'),
        ),
        migrations.AddField(
            model_name='image',
            name='filters',
            field=models.ManyToManyField(blank=True, null=True, to='astrobin.Filter', verbose_name='Filters'),
        ),
        migrations.AddField(
            model_name='image',
            name='focal_reducers',
            field=models.ManyToManyField(blank=True, null=True, to='astrobin.FocalReducer', verbose_name='Focal reducers'),
        ),
        migrations.AddField(
            model_name='image',
            name='guiding_cameras',
            field=models.ManyToManyField(blank=True, null=True, related_name='guiding_cameras', to='astrobin.Camera', verbose_name='Guiding cameras'),
        ),
        migrations.AddField(
            model_name='image',
            name='guiding_telescopes',
            field=models.ManyToManyField(blank=True, null=True, related_name='guiding_telescopes', to='astrobin.Telescope', verbose_name='Guiding telescopes or lenses'),
        ),
        migrations.AddField(
            model_name='image',
            name='imaging_cameras',
            field=models.ManyToManyField(blank=True, null=True, related_name='imaging_cameras', to='astrobin.Camera', verbose_name='Imaging cameras'),
        ),
        migrations.AddField(
            model_name='image',
            name='imaging_telescopes',
            field=models.ManyToManyField(blank=True, null=True, related_name='imaging_telescopes', to='astrobin.Telescope', verbose_name='Imaging telescopes or lenses'),
        ),
        migrations.AddField(
            model_name='image',
            name='mounts',
            field=models.ManyToManyField(blank=True, null=True, to='astrobin.Mount', verbose_name='Mounts'),
        ),
        migrations.AddField(
            model_name='image',
            name='software',
            field=models.ManyToManyField(blank=True, null=True, to='astrobin.Software', verbose_name='Software'),
        ),
        migrations.AlterUniqueTogether(
            name='gearuserinfo',
            unique_together=set([('gear', 'user')]),
        ),
        migrations.AddField(
            model_name='deepsky_acquisition',
            name='filter',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='astrobin.Filter', verbose_name='Filter'),
        ),
        migrations.AlterUniqueTogether(
            name='collection',
            unique_together=set([('user', 'name')]),
        ),
    ]
